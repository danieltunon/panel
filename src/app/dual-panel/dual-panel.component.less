@import '../styles/base';
@import '../styles/mixins';
@import '../styles/typography';
@import '../styles/rectangles';
@deep: ~'/deep/';
// use funtion form to conditionally apply styles
// eg. :host([direction="column"]) { }
//     :host(:not(.collapsed)) { }
// careful with direction=row because since it is default it isn't
// always when the component is declared in the markup


// now using the /deep/ selector it may be beneficial to refactor
// the structure of the app so that it doesn't need all the containers
// and height/width/flex properties since we can select the panel-content
// elements and style them specifically
:host {
    display: flex;
    flex-grow: 1;
    height: 100%;
    width: 100%;
    &@{deep}[panel-content-1], @{deep}[panel-content-2] {
        height: 100%;
        width: 100%;
    }
}

// TODO: look at styles to see if the nesting is messing up the flex
// problem with the flex-basis that is being passed to the nested child
// but it only happens when the .panel is set to display flex
.panel {
    .rectangle-gray242;
    flex-direction: column;
    overflow: hidden;
    border: none;
    transition: flex-basis 300ms ease-out;
}

// this one may be redundant now with the 100% for w and h above
.panel > @{deep}:not(.panel-header) {
    flex-grow: 1;
    overflow-y: auto;
}

.dual-panel-container {
    display: flex;
    height: 100%;
    width: 100%;
    position: relative;
    &.dragging {
        &.row {
            cursor: w-resize;
        }
        &.column {
            cursor: n-resize;
        }
        .panel-splitter {
            background-color: #007cff;
        }
    }
}

.panel-splitter {
    position: relative;
    background-color: gray;
    flex: 0 0 4px;
    &:hover {
        background-color: #007cff; //@boldblue
    }
    &::after {
        content: ' ';
        position: absolute;
    }
}

.panel-splitter.row::after {
    cursor: w-resize;
    top: 0;
    left: -5px;
    width: 14px;
    height: 100%;
}
.panel-splitter.column::after {
    cursor: n-resize;
    left: 0;
    top: -5px;
    height: 14px;
    width: 100%;
}


.panel-header {
    .rectangle-gray230;
    height: 36px;
    padding: 9px;
    &.collapsable:hover {
        .rectangle-lightblue-hover;
        cursor: pointer;

        .panel-header-label {
            color: #007cff;//@boldblue;
        }
    }
    .panel-header-label {
        .text-panel-secondary-header;
        .no-select;
        display: inline-block;
        transform: rotate(0deg);
        transition: transform 300ms;
    }
    // overflow: hidden;
    // white-space: nowrap;
    // text-overflow: ellipsis;
    // z-index: 10;
}

.panel.collapsed {
    .panel-header {
        height: 100%;
        width: 100%;
    }
    .panel-header-label {
        display: inline-block;
        float: left;
        transform-origin: bottom;
        transform: rotate(-90deg);
        transition: transform 300ms;
    }
}

